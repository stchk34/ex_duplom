<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_preprocess_HOOK().
 *
 * Selecting languages like a language code.
 */
function moldova_preprocess_links__dropbutton__dropdown_language(&$variables) {
  $current_lang_id = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables["links"][$current_lang_id]["link"]["#title"]["#text"] = mb_strtoupper($current_lang_id);
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 *
 * Adding custom attribute class for block.
 */
function moldova_preprocess_block(&$variables) {
  if ($variables['elements']['#base_plugin_id'] == 'block_content') {
    $blockType = strtr($variables['content']['#block_content']->bundle(), '_', '-');
    $variables['attributes']['class'][] = 'block--type-' . $blockType;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adding a photo of the current user in the form comment.
 */
function moldova_form_comment_example_form_alter(&$form, &$form_state, $form_id) {
  $form['field_text_comment']['#weight'] = 3;
  $form['user_avatar']['#weight'] = -5;
  // Getting the current user id.
  if ($user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id())) {
    if (!$user->user_picture->isEmpty()) {
      $pictureUri = $user->user_picture->entity->getFileUri();
      $style = \Drupal::entityTypeManager()
        ->getStorage('image_style')
        ->load('thumbnail');
      $urlPicture = $style->buildUrl($pictureUri);
      $form['user_avatar']['#prefix'] = "<div class=\"user-image\"><img src=\"$urlPicture\" alt=\"\"></div>";
    }
  }
  $form['field_text_comment']['#attributes']['#placeholder'] = t('Scrie un comentariu');
  $form['actions']['submit']['#value'] = t('Posteaza');
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adding node tokens for message body in content moderation notification.
 */
function moldova_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'content_moderation_notification_edit_form' || $form_id == 'content_moderation_notification_add_form') {
    $form['body']['token_tree_link']['#token_types'] = 'node';
  }
}

/**
 * Implements hook_preprocess_HOOK() for breadcrumb template.
 *
 * Limit the text length of the last breadcrumb item.
 */
function moldova_preprocess_breadcrumb(&$variables) {
  $max_length = 45;
  $index = array_key_last($variables['breadcrumb']);
  $title = $variables['breadcrumb'][$index]['text'];
  if (strlen($title) > $max_length) {
    $variables['breadcrumb'][$index]['text'] = substr($title, 0, $max_length) . '...';
  }
  // Add the cache tag to update the breadcrumb if the node title changes.
  $nid = \Drupal::routeMatch()->getRawParameter('node');
  $variables['#cache']['tags'][] = 'node:' . $nid;
}

